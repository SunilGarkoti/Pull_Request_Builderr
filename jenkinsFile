pipeline { 



      agent any 
       tools {
        jdk 'Java_Home'
        maven 'Maven_Home'
        }

        stages {

         stage('Initialize') { 
          steps { 
            sh '''
            echo "PATH = ${PATH}"
            echo "M2_HOME = ${M2_HOME}"
             '''
                }

              }

           stage('Build') {
            steps {
             catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
             git credentialsId: 'git_username_password', url: 'https://github.com/SunilGarkoti/jenkins.git'
              
              withMaven {
              sh "mvn clean verify"
              } 
           
           }
                }
             }


          stage('Three'){
           steps{
           
import com.cloudbees.hudson.plugins.modeling.*
import jenkins.model.*
import hudson.model.*

def pluginGhprb = Jenkins.instance.pluginManager.activePlugins.find{ it.getShortName() == 'ghprb' }
if(!pluginGhprb){
  println "You do not have the [ghprb] plugin and so does not seem to be vulnerable, if you had installed it, please comment this check"
  return
}

def pluginVersion = pluginGhprb?.getVersionNumber()
if(pluginVersion && pluginVersion.isOlderThan(new hudson.util.VersionNumber("1.40.0"))){
  println "The plugin [ghprb:${pluginVersion}] is vulnerable, please upgrade at least to [1.40.0] and re-run this script."
  return
}

println ''

int totalNumberOfBuilds = 0
int totalNumberOfCorrectedBuilds = 0
int totalNumberOfFailedBuilds = 0

Jenkins.instance.getAllItems(AbstractProject).each { AbstractProject project ->
  println "Project=[${project.name}] of type=[${project.class.simpleName}]"
  
  boolean affected = false
  AbstractBuild build = project.getLastBuild()
  while(build != null){
    print "\t#${build.number} of type [${build.class.simpleName}] " 
    
    List<CauseAction> causeActions = build.getActions(CauseAction)
     
    totalNumberOfBuilds++
    if(causeActions.any{ it.findCause(org.jenkinsci.plugins.ghprb.GhprbCause) != null }){
      try{
        build.save()
        
        totalNumberOfCorrectedBuilds++
        println "affected, re-saved to erase clear-text credentials"
      }catch(e){
        println "affected, but save FAILED due to ${e.message}"
        e.printStackTrace()
       	totalNumberOfFailedBuilds++
      }
      
      affected = true
    }else{
      println "not affected" 
    }
    
    build = build.getPreviousBuild()
  }

  println "=> ${affected ? 'affected' : 'not affected'}"
  println ''
}

println "Builds found: ${totalNumberOfBuilds}, affected and corrected: ${totalNumberOfCorrectedBuilds}"
if(totalNumberOfFailedBuilds > 0){
  println "  some build save failed, please look above for details of which builds was not saved correctly"
}
return
           
             }
              }

}
}
